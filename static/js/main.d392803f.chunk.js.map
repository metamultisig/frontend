{"version":3,"sources":["fields/AddressField.tsx","fields/Bytes32Field.tsx","fields/IntField.tsx","fields/StringField.tsx","fields/BytesField.tsx","fields/ABIField.tsx","FunctionABIEntry.tsx","ABIPicker.tsx","ABIFetcher.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["address_re","AddressField","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","valid","timerId","onChange","bind","assertThisInitialized","tryResolveName","value","test","includes","endsWith","setTimeout","e","target","clearTimeout","undefined","provider","resolveName","addr","react_default","a","createElement","TextField_default","label","error","placeholder","Component","bytes32_re","Bytes32Field","event","_this$props","classes","className","textField","replace","InputProps","startAdornment","InputAdornment_default","position","withStyles","theme","createStyles","marginLeft","spacing","unit","marginRight","signed","startsWith","slice","trim","bigNumberify","type","toString","StringField","BytesField","TextEncoder","encode","decodedValue","TextDecoder","decode","FormControl_default","formControl","InputLabel_default","htmlFor","Input_default","id","ABIField","fields_Bytes32Field","IntField","fields_AddressField","fields_BytesField","fields_StringField","FunctionABIEntry","state","fields","Array","abi","inputs","length","fill","onSubmit","setState","map","field","_this2","input","idx","fields_ABIField","key","name","Button_default","variant","button","color","disabled","reduce","acc","cur","onClick","margin","ABIPicker","args","functions","filter","frag","constant","isFunctionFragment","const","sort","b","localeCompare","func","ExpansionPanel_default","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","Typography_default","ExpansionPanelDetails_default","src_FunctionABIEntry","ABIFetcher","fetch","response","json","data","JSON","parse","result","App","abiFetcher","ethers","providers","Web3Provider","ethereum","onAddressChange","contractAddress","enable","contract","Contract","connect","getSigner","apply","toConsumableArray","tx","console","log","hash","src_ABIPicker","container","display","flexWrap","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d392803f.chunk.js","sourcesContent":["import { ethers } from 'ethers';\nimport React, { Component } from 'react';\nimport TextField from '@material-ui/core/TextField';\n\ninterface Props {\n  provider: ethers.providers.Provider;\n  label: string;\n  value: string|null;\n  onChange?: (value: string, valid: boolean, addr: string) => any;\n}\n\nconst address_re = /^0x[0-9a-fA-F]{40}$/;\n\nclass AddressField extends Component<Props, {}> {\n  private valid: boolean;\n  private timerId?: ReturnType<typeof setTimeout>;\n\n  constructor(props : Props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n    this.tryResolveName = this.tryResolveName.bind(this);\n    this.valid = props.value != null && address_re.test(props.value);\n\n    if(props.value != null && props.value.includes('.') && !props.value.endsWith('.')) {\n      this.timerId = setTimeout(this.tryResolveName, 200);\n    }\n  }\n\n  onChange(e: React.ChangeEvent<HTMLInputElement>) {\n    if(!e.target.value) return;\n\n    this.valid = address_re.test(e.target.value);\n\n    if(this.props.onChange) {\n      this.props.onChange(e.target.value, address_re.test(e.target.value), e.target.value);\n    }\n\n    if(e.target.value.includes('.') && !e.target.value.endsWith('.')) {\n      if(this.timerId) {\n        clearTimeout(this.timerId);\n        this.timerId = undefined;\n      }\n      this.timerId = setTimeout(this.tryResolveName, 200);\n    }\n  }\n\n  async tryResolveName() {\n    const addr = await this.props.provider.resolveName(this.props.value as string);\n    if(addr) {\n      this.valid = true;\n      if(this.props.onChange) {\n        this.props.onChange(this.props.value as string, true, addr);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if(this.timerId) {\n      clearTimeout(this.timerId);\n    }\n  }\n\n  render() {\n    return (\n      <TextField\n        onChange={this.onChange}\n        label={this.props.label}\n        value={this.props.value || ''}\n        error={!this.valid}\n        placeholder=\"name.eth or 0x...\"\n      />\n    );\n  }\n};\n\nexport default AddressField;\n","import React, { Component } from 'react';\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\n\nconst bytes32_re = /^[0-9a-fA-f]{64}$/;\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    textField: {\n      marginLeft: theme.spacing.unit,\n      marginRight: theme.spacing.unit,\n    },\n  });\n\ninterface Props extends WithStyles<typeof styles> {\n  label: string;\n  value: string|null;\n  onChange?: (value: string, valid: boolean) => any;\n}\n\nclass Bytes32Field extends Component<Props, {}> {\n  constructor(props: Props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(event: React.ChangeEvent<HTMLInputElement>) {\n    if(this.props.onChange) {\n      this.props.onChange(\"0x\" + event.target.value, bytes32_re.test(event.target.value));\n    }\n  }\n\n  render() {\n    const { label, classes } = this.props;\n    return <TextField\n      label={label}\n      className={classes.textField}\n      onChange={this.onChange}\n      error={!bytes32_re.test(this.props.value || '')}\n      value={(this.props.value || '').replace(/^0x/, '')}\n      InputProps={{\n        startAdornment: <InputAdornment position=\"start\">0x</InputAdornment>,\n      }}\n      placeholder=\"(32 bytes)\"\n    />\n  }\n};\n\nexport default withStyles(styles)(Bytes32Field);\n","import { BigNumber, bigNumberify } from 'ethers/utils';\nimport React, { Component } from 'react';\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    textField: {\n      marginLeft: theme.spacing.unit,\n      marginRight: theme.spacing.unit,\n    },\n  });\n\ninterface Props extends WithStyles<typeof styles> {\n  label: string;\n  value: BigNumber|null;\n  signed: boolean;\n  onChange?: (value: BigNumber|null, valid: boolean) => any;\n}\n\nclass Bytes32Field extends Component<Props, {}> {\n  constructor(props: Props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(event: React.ChangeEvent<HTMLInputElement>) {\n    if(this.props.onChange) {\n      var value = event.target.value;\n      if(this.props.signed && value.startsWith('-')) {\n        value = value.slice(1);\n      }\n      if(value.trim() == '') {\n        this.props.onChange(null, true);\n      } else {\n        this.props.onChange(bigNumberify(value), true);\n      }\n    }\n  }\n\n  render() {\n    const { label, value, classes } = this.props;\n    return <TextField\n      label={label}\n      className={classes.textField}\n      onChange={this.onChange}\n      type=\"number\"\n      value={value == null?'':value.toString()}\n      error={value == null}\n      placeholder={this.props.signed?'(Integer)':'(Unsigned Integer)'}\n    />\n  }\n};\n\nexport default withStyles(styles)(Bytes32Field);\n","import React, { Component } from 'react';\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    textField: {\n      marginLeft: theme.spacing.unit,\n      marginRight: theme.spacing.unit,\n    },\n  });\n\ninterface Props extends WithStyles<typeof styles> {\n  label: string;\n  value: string|null;\n  onChange?: (value: string, valid: boolean) => any;\n}\n\nclass StringField extends Component<Props, {}> {\n  constructor(props: Props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(event: React.ChangeEvent<HTMLInputElement>) {\n    if(this.props.onChange) {\n      this.props.onChange(event.target.value, true);\n    }\n  }\n\n  render() {\n    const { label, value, classes } = this.props;\n    return <TextField\n      label={label}\n      className={classes.textField}\n      placeholder=\"(String)\"\n      onChange={this.onChange}\n      value={value || ''}\n    />\n  }\n};\n\nexport default withStyles(styles)(StringField);\n","import React, { Component } from 'react';\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    formControl: {\n      marginLeft: theme.spacing.unit,\n      marginRight: theme.spacing.unit,\n    },\n  });\n\ninterface Props extends WithStyles<typeof styles> {\n  label: string;\n  value: Uint8Array|null;\n  onChange?: (value: Uint8Array, valid: boolean) => any;\n}\n\nclass BytesField extends Component<Props, {}> {\n  constructor(props: Props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(event: React.ChangeEvent<HTMLInputElement>) {\n    if(this.props.onChange) {\n      this.props.onChange(new TextEncoder().encode(event.target.value), true);\n    }\n  }\n\n  render() {\n    const { label, value, classes } = this.props;\n    const decodedValue = (value == null)?'':new TextDecoder().decode(value);\n    return <FormControl className={classes.formControl}>\n      <InputLabel htmlFor=\"component-simple\">{label}</InputLabel>\n      <Input id=\"component-simple\" placeholder=\"(Bytes)\" onChange={this.onChange} value={decodedValue} />\n    </FormControl>\n  }\n};\n\nexport default withStyles(styles)(BytesField);\n","import { ethers } from 'ethers';\nimport { BigNumber } from 'ethers/utils';\nimport React, { Component } from 'react';\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Bytes32Field from './Bytes32Field';\nimport IntField from './IntField';\nimport AddressField from './AddressField';\nimport StringField from './StringField';\nimport BytesField from './BytesField';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    textField: {\n      marginLeft: theme.spacing.unit,\n      marginRight: theme.spacing.unit,\n    },\n  });\n\ntype FieldValue = string|Uint8Array|BigNumber|null;\n\ninterface Props extends WithStyles<typeof styles> {\n  provider: ethers.providers.Provider;\n  label: string;\n  type: string;\n  value: FieldValue;\n  onChange?: (value: FieldValue, valid: boolean) => any;\n}\n\ninterface State {\n}\n\nclass ABIField extends Component<Props, State> {\n  render() {\n    const { provider, label, type, value, onChange, classes } = this.props;\n    switch(type) {\n    case 'bytes32':\n      return <Bytes32Field label={label} onChange={onChange} value={value as string|null} />\n    case 'uint256':\n      return <IntField label={label} signed={true} onChange={onChange} value={value as BigNumber|null} />\n    case 'int256':\n      return <IntField label={label} signed={false} onChange={onChange} value={value as BigNumber|null} />\n    case 'address':\n      return <AddressField label={label} provider={provider} onChange={onChange} value={value as string|null} />\n    case 'bytes':\n      return <BytesField label={label} onChange={onChange} value={value as Uint8Array|null} />\n    case 'string':\n      return <StringField label={label} onChange={onChange} value={value as string|null} />\n    default:\n      return <span>Unsupported type {type} for {label}</span>\n    }\n  }\n};\n\nexport default withStyles(styles)(ABIField);\n","import { ethers } from 'ethers';\nimport { BigNumber } from 'ethers/utils';\nimport React, { Component } from 'react';\nimport { FunctionFragment } from 'ethers/utils/abi-coder';\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\nimport ABIField from './fields/ABIField';\nimport Button from '@material-ui/core/Button';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    textField: {\n      marginLeft: theme.spacing.unit,\n      marginRight: theme.spacing.unit,\n    },\n    button: {\n      margin: theme.spacing.unit,\n    },\n  });\n\ninterface Props extends WithStyles<typeof styles> {\n  provider: ethers.providers.Provider;\n  abi: FunctionFragment;\n  onSubmit?: (args: Array<FieldValue>) => any;\n}\n\ntype FieldValue = string|Uint8Array|BigNumber|null;\n\ninterface State {\n  fields: Array<{value: FieldValue, valid: boolean}>;\n}\n\nclass FunctionABIEntry extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      fields: Array(props.abi.inputs.length).fill({value: null, valid: false}),\n    };\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onChange(id: number, value: FieldValue, valid: boolean) {\n    const fields = this.state.fields;\n    fields[id] = {value: value, valid: valid};\n    this.setState({\n      fields: fields,\n    });\n  }\n\n  onSubmit(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    if(this.props.onSubmit) {\n      this.props.onSubmit(this.state.fields.map(field => field.value));\n    }\n  }\n\n  render() {\n    const { abi, classes, provider } = this.props;\n    const inputs = abi.inputs.map((input, idx) => {\n      return <ABIField provider={provider} key={input.name} label={input.name as string} type={input.type as string} value={this.state.fields[idx].value} onChange={(value, valid) => this.onChange(idx, value, valid)} />\n    });\n    return <div>\n      {inputs}\n      <Button\n        variant=\"contained\"\n        className={classes.button}\n        color=\"primary\"\n        disabled={!this.state.fields.reduce((acc, cur) => acc && cur.valid, true)}\n        onClick={this.onSubmit}>\n        Submit\n      </Button>\n    </div>;\n  }\n};\n\nexport default withStyles(styles)(FunctionABIEntry);\n","import { ethers } from 'ethers';\nimport { BigNumber} from 'ethers/utils';\nimport { EventFragment, FunctionFragment } from 'ethers/utils/abi-coder';\nimport React, { Component } from 'react';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport FunctionABIEntry from './FunctionABIEntry';\n\ntype FieldValue = string|Uint8Array|BigNumber|null;\n\ninterface Props {\n  provider: ethers.providers.Provider;\n  abi: Array<EventFragment | FunctionFragment>;\n  const: boolean;\n  onSubmit?: (abi: FunctionFragment, args: Array<FieldValue>) => any;\n}\n\ninterface State {\n}\n\nfunction isFunctionFragment(frag: EventFragment | FunctionFragment): frag is FunctionFragment {\n  return (frag as FunctionFragment).constant !== undefined;\n}\n\nclass ABIPicker extends Component<Props, State> {\n  constructor(props : Props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  componentWillUnmount() {\n  }\n\n  onSubmit(abi: FunctionFragment, args: Array<FieldValue>) {\n    if(this.props.onSubmit) {\n      this.props.onSubmit(abi, args);\n    }\n  }\n\n  render() {\n    const functions = this.props.abi.filter(frag => isFunctionFragment(frag) && frag.constant == this.props.const) as Array<FunctionFragment>;\n    functions.sort((a, b) => a.name.localeCompare(b.name));\n    const panels = functions.map(func => {\n      return (\n        <ExpansionPanel key={func.name}>\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n            <Typography>{func.name}</Typography>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <FunctionABIEntry provider={this.props.provider} abi={func} onSubmit={(args) => this.onSubmit(func, args)} />\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n      );\n    });\n    return panels;\n  }\n};\n\nexport default ABIPicker;\n","import { ethers } from 'ethers';\nimport { EventFragment, FunctionFragment } from 'ethers/utils/abi-coder';\n\nconst ETHERSCAN_ABI_ENDPOINT = \"https://api.etherscan.io/api?module=contract&action=getabi&address=\";\n\nclass ABIFetcher {\n  provider: ethers.providers.Provider;\n\n  constructor(provider: ethers.providers.Provider) {\n    this.provider = provider;\n  }\n\n  async fetch(addr: string, name?: string): Promise<Array<EventFragment | FunctionFragment>> {\n    const response = await fetch(ETHERSCAN_ABI_ENDPOINT + addr);\n    const data = await response.json();\n    // TODO: Handle errors\n    return JSON.parse(data.result);\n  }\n}\n\nexport default ABIFetcher;\n","import { ethers } from 'ethers';\nimport { BigNumber } from 'ethers/utils';\nimport { EventFragment, FunctionFragment } from 'ethers/utils/abi-coder';\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AddressField from './fields/AddressField';\nimport ABIPicker from './ABIPicker';\nimport ABIFetcher from './ABIFetcher';\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\n\ninterface Ethereum extends ethers.providers.AsyncSendable {\n  enable: () => any;\n}\n\ndeclare var ethereum: Ethereum;\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    container: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n    textField: {\n      marginLeft: theme.spacing.unit,\n      marginRight: theme.spacing.unit,\n    },\n  });\n\ntype FieldValue = string|Uint8Array|BigNumber|null;\n\ninterface State {\n  abi: Array<EventFragment | FunctionFragment>;\n  contractAddress: string;\n}\n\ninterface Props extends WithStyles<typeof styles> {}\n\nclass App extends Component<Props, State> {\n  provider: ethers.providers.JsonRpcProvider;\n  abiFetcher: ABIFetcher;\n\n  constructor(props: Props) {\n      super(props)\n      this.provider = new ethers.providers.Web3Provider(ethereum);\n      this.abiFetcher = new ABIFetcher(this.provider);\n      this.onAddressChange = this.onAddressChange.bind(this);\n      this.onSubmit = this.onSubmit.bind(this);\n      this.state = {\n        abi: [],\n        contractAddress: '',\n      }\n  }\n\n  async onAddressChange(value: string, valid: boolean, addr: string) {\n    if(valid) {\n      const abi = await this.abiFetcher.fetch(addr, value);\n      this.setState({\n        abi: abi,\n        contractAddress: value,\n      });\n    } else {\n      this.setState({\n        contractAddress: value,\n      });\n    }\n  }\n\n  async onSubmit(abi: FunctionFragment, args: Array<FieldValue>) {\n    await ethereum.enable();\n    const contract = new ethers.Contract(this.state.contractAddress, this.state.abi, this.provider)\n      .connect(this.provider.getSigner());\n    const tx = await contract[abi.name](...args);\n    console.log(tx.hash);\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className=\"App\">\n        <AddressField label=\"Address\" provider={this.provider} onChange={this.onAddressChange} value={this.state.contractAddress} />\n        <ABIPicker const={false} provider={this.provider} abi={this.state.abi} onSubmit={this.onSubmit} />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}